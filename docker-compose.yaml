services:
  # Kafka
  broker:
    image: confluentinc/cp-kafka:7.6.1
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    networks:
      - app-network

  # Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - app-network
  database:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${DB_SA_PASSWORD}
    ports:
      - "1433:1433"
    volumes:
      - mssql_data:/var/opt/mssql
    networks:
      app-network:
        aliases:
          - sql
         

  agenda-api:
    build:
      context: ./src
      dockerfile: Agenda/DOS.Agenda.API/Dockerfile
    depends_on:
      - database
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - DEFAULT_CONNECTION=${DEFAULT_CONNECTION}
      - AppSettings__SecretKey=${AppSettings__SecretKey}
    ports:
      - "5001:8080"
    networks:
      - app-network

  auth-api:
    build:
      context: ./src
      dockerfile: Auth/DOS.Auth.API/Dockerfile
    depends_on:
      - database
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - DEFAULT_CONNECTION=${DEFAULT_CONNECTION}
      - AppSettings__SecretKey=${AppSettings__SecretKey}
    ports:
      - "5002:8080"
    networks:
      - app-network

  doacao-api:
    build:
      context: ./src
      dockerfile: Doacao/DOS.Doacao.API/Dockerfile
    depends_on:
      - database
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - DEFAULT_CONNECTION=${DEFAULT_CONNECTION}
      - AppSettings__SecretKey=${AppSettings__SecretKey}
    ports:
      - "5003:8080"
    networks:
      - app-network

  estoque-api:
    build:
      context: ./src
      dockerfile: Estoque/DOS.Estoque.API/Dockerfile
    depends_on:
      - database
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - DEFAULT_CONNECTION=${DEFAULT_CONNECTION}
      - AppSettings__SecretKey=${AppSettings__SecretKey}
    ports:
      - "5004:8080"
    networks:
      - app-network

  usuario-api:
    build:
      context: ./src
      dockerfile: Usuario/DOS.Usuario.API/Dockerfile
    depends_on:
      - database
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - DEFAULT_CONNECTION=${DEFAULT_CONNECTION}
      - AppSettings__SecretKey=${AppSettings__SecretKey}
    ports:
      - "5005:8080"
    networks:
      - app-network
  notificacao-api:
    build:
      context: ./src
      dockerfile: Notificacao/DOS.Notificacao.API/Dockerfile
    depends_on:
      - database
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
    ports:
      - "5006:8080"
    networks:
      - app-network
  
 

volumes:
  mssql_data:

networks:
  app-network:
    driver: bridge
